//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define NAV  1
#define SYM  2
#define ADJ  3
#define TVP1 4
#define TVP2 5

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

/ {
    combos {
        compatible = "zmk,combos";

        sch {
            bindings = <&macro_Sch>;
            key-positions = <10 11 12>;
            timeout-ms = <45>;
            slow-release;
        };

        tch {
            bindings = <&macro_Tch>;
            key-positions = <10 11 13>;
            timeout-ms = <45>;
            slow-release;
        };

        th {
            bindings = <&lk_th H T>;
            key-positions = <12 13>;
            timeout-ms = <45>;
            slow-release;
        };

        ch {
            bindings = <&macro_Ch>;
            key-positions = <11 12>;
            timeout-ms = <45>;
            slow-release;
        };

        wh {
            bindings = <&macro_Wh>;
            key-positions = <1 2>;
            timeout-ms = <45>;
            slow-release;
        };

        sh {
            bindings = <&lk_sh H S>;
            key-positions = <10 11>;
            timeout-ms = <45>;
            slow-release;
        };

        gh {
            bindings = <&lk_gh H G>;
            key-positions = <2 3>;
            timeout-ms = <45>;
            slow-release;
        };

        ph {
            bindings = <&lk_ph H P>;
            key-positions = <30 29>;
            timeout-ms = <45>;
            slow-release;
        };

        qu {
            bindings = <&lk_qu Q U>;
            key-positions = <1 3>;
            timeout-ms = <45>;
            slow-release;
        };

        z {
            bindings = <&kp Z>;
            key-positions = <11 13>;
        };
    };

    behaviors {
        HMR_L: HMR_L {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_L";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <5 15 26 36 35 37 32 33 34 5 6 7 8 9 15 16 17 18 19 26 27 28 29 30 31 35 36 37>;
            tapping-term-ms = <200>;
            quick-tap-ms = <170>;
            flavor = "balanced";
        };

        HMR_R: HMR_R {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_R";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <170>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 25 32 33 34 35 36 37>;
        };

        ak_h: ak_h {
            compatible = "zmk,behavior-adaptive-key";
            #binding-cells = <0>;
            bindings = <&kp H>;

            akt_ah {
                trigger-keys = <A>;
                max-prior-idle-ms = <300>;
                bindings = <&kp U>;
            };

            akt_uh {
                trigger-keys = <U>;
                max-prior-idle-ms = <300>;
                bindings = <&kp A>;
            };

            akt_eh {
                trigger-keys = <E>;
                max-prior-idle-ms = <300>;
                bindings = <&kp O>;
            };

            akt_oh {
                trigger-keys = <O>;
                max-prior-idle-ms = <300>;
                bindings = <&kp E>;
            };
        };

        // ak_m: ak_m { // GM -> GL, 
        //     compatible = "zmk,behavior-adaptive-key";
        //     #binding-cells = <0>;
        //     bindings = <&kp M>;
        //     akt_gm {
        //         trigger-keys = <G>;
        //         max-prior-idle-ms = <300>;
        //         bindings = <&kp L>;
        //     };
        // };
        // // And similarly for VP->VL, PV->LV, BT->BL, TB->LB
        // ak_g: ak_g {
        //     compatible = "zmk,behavior-adaptive-key";
        //     #binding-cells = <0>;
        //     bindings = <&kp G>;
        //     // Binding two behaviors: JG->JPG
        //     akt_jg {
        //         trigger-keys = <J>;
        //         max-prior-idle-ms = <300>;
        //         bindings = <&kp P &kp G>;
        //     };
        // };
        // shift_repeat: shift_repeat {
        //     compatible = "zmk,behavior-adaptive-key";
        //     #binding-cells = <0>;
        //     bindings = <&sk LSHFT>;
        //     repeat {
        //         trigger-keys = <A B C D E F G H I J K L M N O P Q R S T U V W X Y Z>;
        //         bindings = <&key_repeat>;
        //         max-prior-idle-ms = <350>;
        //         strict-modifiers;
        //     };
        // };

        lk_th: lk_th {
            compatible = "zmk,behavior-hold-tap";
            label = "LK_TH";
            bindings = <&macro_tion>, <&macro_Th>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        lk_sh: lk_sh {
            compatible = "zmk,behavior-hold-tap";
            label = "LK_SH";
            bindings = <&macro_sion>, <&macro_Sh>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        lk_gh: lk_gh {
            compatible = "zmk,behavior-hold-tap";
            label = "LK_GH";
            bindings = <&macro_ght>, <&macro_Gh>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        lk_ph: lk_ph {
            compatible = "zmk,behavior-hold-tap";
            label = "LK_PH";
            bindings = <&macro_phi>, <&macro_Ph>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        lk_qu: lk_qu {
            compatible = "zmk,behavior-hold-tap";
            label = "LK_QU";
            bindings = <&kp>, <&macro_Qu>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        DotColn: DotColn {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&ak_DOT>, <&kp COLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        DotColnJ: DotColnJ { // no adaptive Japanese
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        SlshStar: SlshStar {  // shift = *, alt = backslash
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&SlshBslh>, <&kp STAR>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        SlshBslh: SlshBslh {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp FSLH>, <&kp BSLH>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };
        SlshStarJ: SlshStarJ { // no adaptive Japanese
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp FSLH>, <&kp STAR>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        HashDllr: HashDllr {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&ak_HASH>, <&kp DLLR>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        MinusPlus: MinusPlus {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp PLUS>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

/*
 * &DqtLT (put just this in the keymap)
 *
 * Double Quote key behaviors:
 *      tap     = " double quote
 *      shift   = < (less than)
 *      alt     = « (French quote double chevron)
 *      linger  = paired symbols w/insertion point between
 *
 * &SqtGT is the corresponding behavior.
 *
 * This set is used when the " appears to the left of ' in the keymap
 * so the paired symbols <«  »> are spacially correct.
 *
 * To use, just put &DqtLT in the keymap. The other behaviors are
 * so the paired symbols <«  »> are spacially correct.
 *
 */
 
#define DqtLT lkDqt_lkLT 0 0    // simple macros to keep the keymap uncluttered
#define SqtGT lkSqt_GT 0 0      // simply put &DqtLT or &SqtGT in the keymap

        lkDqt_lkLT: lkDqt_lkLT {            // Hold for paired symbols
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&pairDquotLT>, <&leftDquotLT>;
        };
        pairDquotLT: pairDquotLT {          // SHFT for <>
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&macro_pairDquo>, <&macro_pairLtGt>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        leftDquotLT: leftDquotLT {          // SHFT for <
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&leftDquotChev>, <&kp LT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        leftDquotChev: leftDquotLChev {     // " or ALT for «
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&ak_DQT>, <&kp LDCHEV>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        lkSqt_GT: lkSqt_GT {                // Hold for paired ’’
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&pairSquotGT>, <&rightSquotGT>;
        };
        pairSquotGT: pairSquotGT {          // SHIFT = >
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&pairSquotChev>, <&kp GT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        pairSquotChev: pairSquotChev {          // ALT = »
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&macro_pairSquo>, <&kp RDCHEV>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };
        rightSquotGT: rightSquotGT {          // SHIFT = >
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&SqtRchev>, <&kp GT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        SqtRchev: SqtRchev {                // ' or ALT = »
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&ak_SQT>, <&kp RDCHEV>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };
/*
 * end of Double Quote key behaviors
 */

/*
 * &lkSqt_lkLT (put just this in the keymap)
 *
 * Single Quote key behaviors:
 *      tap     = ' single quote
 *      shift   = < (less than)
 *      alt     = « (French quote double chevron)
 *      linger  = paired symbols w/insertion point between
 *
 * &lkDqt_GT is the corresponding behavior.
 *
 * This set is used when the ' appears to the left of " in the keymap
 * so the paired symbols <«  »> are spacially correct. (i.e. Rhodium)
 *
 * To use, just put &SqtLT in the keymap. The other behaviors are
 * referenced by this one.
 *
 */

        lkSqt_lkLT: lkSqt_lkLT {            // Hold for paired symbols
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&pairSquotLT>, <&leftSquotLT>;
        };
        pairSquotLT: pairSquotLT {          // SHFT for <>
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&pairSquotDchev>, <&macro_pairLtGt>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        pairSquotDchev: pairSquotDchev {    // '' or ALT for «»
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&macro_pairSquo>, <&macro_pairDchev>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };
        leftSquotLT: leftSquotLT {          // SHFT for <
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&leftSquotChev>, <&kp LT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        leftSquotChev: leftSquotLChev {     // ' or ALT for «
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LT>, <&kp LDCHEV>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        lkDqt_GT: lkDqt_GT {                // Hold for paired “”
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&pairDquotGT>, <&rightDqtGT>;
        };
        pairDquotGT: pairDquotGT {          // SHIFT = >
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&macro_pairDquo>, <&kp GT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        rightDqtGT: leftDqtGT {              // SHIFT = >
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&DqtRchev>, <&kp GT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        DqtRchev: DqtRchev {                // " or ALT = »
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&ak_DQT>, <&kp RDCHEV>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };
/*
 * end of Single Quote key behaviors
 */        
        ak_DOT: ak_DOT {
            compatible = "zmk,behavior-adaptive-key";
            #binding-cells = <0>;
            bindings = <&sl_dot>;

            ak_CMMA_E { trigger-keys = <FSLH>; max-prior-idle-ms = <my_ak_term>; bindings = <&kp BSPC  &kp EXCL>; };
        };
        ak_DQT: ak_DQT {
            compatible = "zmk,behavior-adaptive-key";
            #binding-cells = <0>;
            bindings = <&kp DQT>;

            ak_DQT_Q { trigger-keys = <FSLH>; max-prior-idle-ms = <my_ak_term>; bindings = <&kp BSPC  &kp QMARK>; };
        };
        ak_SQT: ak_SQT {
            compatible = "zmk,behavior-adaptive-key";
            #binding-cells = <0>;
            bindings = <&kp SQT>;

            ak_SQT_Q { trigger-keys = <FSLH>; max-prior-idle-ms = <my_ak_term>; bindings = <&kp BSPC  &kp S_INVQ>; };
        };
        ak_HASH: ak_HASH {
            compatible = "zmk,behavior-adaptive-key";
            #binding-cells = <0>;
            bindings = <&kp HASH>;

        ak_HASH_INVX { trigger-keys = <FSLH>; max-prior-idle-ms = <my_ak_term>; bindings = <&kp BSPC &kp S_INVX>; };
        };

        CmmaSemi: CmmaSemi { // press = COMMA,shift = Semicolon
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&ak_CMMA>, <&kp SEMI>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        ak_CMMA: ak_CMMA { // double-tap comma = caps_word
            compatible = "zmk,behavior-adaptive-key";
            #binding-cells = <0>;
            bindings = <&kp CMMA>;

            ak_CMMA_cap { trigger-keys = <CMMA>; max-prior-idle-ms = <my_cc_term>; bindings = <&kp BSPC  &caps_word>; };
        };
        CmmaMgc: CmmaMgc {              // Hold for CAPSLOCK, tap for COMMA
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <my_tapping_term>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&CmmaSemi>;
        };
    };

    macros {
        macro_Th: macro_Th {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp T>,
                <&macro_release>,
                <&kp LSHIFT &kp RSHFT>,
                <&macro_press>,
                <&kp H>;

            label = "MACRO_TH";
        };

        macro_Ch: macro_Ch {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp C>,
                <&macro_release>,
                <&kp LSHIFT &kp RSHFT>,
                <&macro_press>,
                <&kp H>;

            label = "MACRO_CH";
        };

        macro_Wh: macro_Wh {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp W>,
                <&macro_release>,
                <&kp LSHIFT &kp RSHFT>,
                <&macro_press>,
                <&kp H>;

            label = "MACRO_WH";
        };

        macro_Sh: macro_Sh {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp S>,
                <&macro_release>,
                <&kp LSHIFT &kp RSHFT>,
                <&macro_press>,
                <&kp H>;

            label = "MACRO_SH";
        };

        macro_Gh: macro_Gh {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp G>,
                <&macro_release>,
                <&kp LSHIFT &kp RSHFT>,
                <&macro_press>,
                <&kp H>;

            label = "MACRO_GH";
        };

        macro_Ph: macro_Ph {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp P>,
                <&macro_release>,
                <&kp LSHIFT &kp RSHFT>,
                <&macro_press>,
                <&kp H>;

            label = "MACRO_PH";
        };

        macro_Qu: macro_Qu {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp Q>,
                <&macro_release>,
                <&kp LSHIFT &kp RSHFT>,
                <&macro_press>,
                <&kp U>;

            label = "MACRO_QU";
        };

        macro_Sch: macro_Sch {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp S>,
                <&macro_release>,
                <&kp LSHIFT &kp RSHFT>,
                <&macro_press>,
                <&kp C &kp H>;

            label = "MACRO_SCH";
        };

        macro_Tch: macro_Tch {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp T>,
                <&macro_release>,
                <&kp LSHIFT &kp RSHFT>,
                <&macro_press>,
                <&kp C &kp H>;

            label = "MACRO_TCH";
        };

        macro_sion: macro_sion {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp S &kp I &kp O &kp N>;

            label = "MACRO_SION";
        };

        macro_tion: macro_tion {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp T &kp I &kp O &kp N>;

            label = "MACRO_TION";
        };

        macro_ght: macro_ght {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp G &kp H &kp T>;

            label = "MACRO_GHT";
        };

        macro_ing: macro_ing {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp I &kp N &kp G>;

            label = "MACRO_ING";
        };

        macro_phi: macro_phi {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp P &kp H &kp I>;

            label = "MACRO_PHI";
        };


        macro_pairLtGt: macro_pairLtGt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <55>;
            bindings = <&macro_release &kp LSHFT>
                , <&macro_release &kp RSHFT>
                , <&macro_release &kp LALT>
                , <&macro_release &kp RALT>
                , <&macro_release &kp LCTL>
                , <&macro_release &kp RCTL>
                , <&macro_release &kp LGUI>
                , <&macro_release &kp RGUI>
                , <&macro_tap &kp LT>
                , <&macro_tap &kp GT>
                , <&macro_tap &kp LEFT>
                ;

            label = "MACRO_PAIR_GT"
        };

        macro_pairDquo: macro_pairDquo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_release &kp LSHFT>
                , <&macro_release &kp RSHFT>
                , <&macro_release &kp LALT>
                , <&macro_release &kp RALT>
                , <&macro_release &kp LCTL>
                , <&macro_release &kp RCTL>
                , <&macro_release &kp LGUI>
                , <&macro_release &kp RGUI>
                , <&macro_tap &kp LDQUO>
                , <&macro_tap &kp RDQUO>
                , <&macro_tap &kp LEFT>
                ;

            label = "MACRO_PAIR_DQUO";
        };

        macro_pairSquo: macro_pairSquo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_release &kp LSHFT>
                , <&macro_release &kp RSHFT>
                , <&macro_release &kp LALT>
                , <&macro_release &kp RALT>
                , <&macro_release &kp LCTL>
                , <&macro_release &kp RCTL>
                , <&macro_release &kp LGUI>
                , <&macro_release &kp RGUI>
                , <&macro_tap &kp LSQUO>
                , <&macro_tap &kp RSQUO>
                , <&macro_tap &kp LEFT>
                ;

            label = "MACRO_PAIR_SQUO";
        };

        
    };

    keymap {
        compatible = "zmk,keymap";

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        base_layer {
            // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓

            label = "BASE";

            // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
            //             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
            //             ┃     Q     ┃     W     ┃     F     ┃     P     ┃     G     ┃   ┃     J     ┃     L     ┃     U     ┃     Y     ┃     ;     ┃
            //             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
            //             ┃     A     ┃     R     ┃     S     ┃     T     ┃     D     ┃   ┃     H     ┃     N     ┃     E     ┃     I     ┃     O     ┃
            // ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
            // ┃     Q     ┃     Z     ┃     X     ┃     C     ┃     V     ┃     B     ┃   ┃     K     ┃     M     ┃     ,     ┃     .     ┃     /     ┃     \     ┃
            // ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
            //                                     ┃    DEL    ┃    TAB    ┃    SPC    ┃   ┃   ENTER   ┃           ┃   BSPC    ┃
            //                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛

            bindings = <
         &kp X  &kp W          &kp M              &kp G                &lkDqt_lkLT 0 0    &HashDllr   &DotColn                 &lkSqt_GT 0 0      &kp J          &kp B
         &kp S  &HMR_L LGUI C  &HMR_L LEFT_ALT N  &HMR_L LCTRL T       &kp K              &CmmaMgc CAPSLOCK 0  &HMR_R LCTRL A           &HMR_R LEFT_ALT E  &HMR_R LGUI I  &ak_h
&kp DEL  &kp V  &kp F          &kp L              &kp D                &SlshStar          &MinusPlus  &kp U                    &kp O              &kp Y          &kp P  &kp BSPC
                               &lt 1 TAB          &HMR_L LEFT_SHIFT R  &kp SPACE          &kp ENTER   &HMR_R LEFT_SHIFT SPACE  &lt 2 ESC
            >;
        };

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        nav_layer {
            // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓

            label = "NAVI";

            // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
            //             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
            //             ┃           ┃           ┃     UP    ┃           ┃     {     ┃   ┃     }     ┃     7     ┃     8     ┃     9     ┃     +     ┃
            //             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
            //             ┃   SHIFT   ┃   LEFT    ┃    DOWN   ┃   RIGHT   ┃     [     ┃   ┃     ]     ┃     4     ┃     5     ┃     6     ┃     -     ┃
            // ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
            // ┃           ┃           ┃   P UP    ┃  C LOCK   ┃  P DOWN   ┃     (     ┃   ┃     )     ┃     1     ┃     2     ┃     3     ┃     *     ┃           ┃
            // ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
            //                                     ┃           ┃    TAB    ┃    SPC    ┃   ┃    DEL    ┃     0     ┃           ┃
            //                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛

            bindings = <
        &trans  &trans     &kp UP    &trans     &trans    &trans  &kp KP_N7        &kp KP_N8  &kp KP_N9  &kp KP_PLUS
        &trans  &kp LEFT   &kp DOWN  &kp RIGHT  &trans    &trans  &kp KP_N4        &kp KP_N5  &kp KP_N6  &kp KP_MINUS
&trans  &trans  &kp PG_UP  &trans    &kp PG_DN  &trans    &trans  &kp KP_N1        &kp KP_N2  &kp KP_N3  &kp KP_MULTIPLY  &trans
                           &trans    &trans     &trans    &trans  &kp KP_NUMBER_0  &trans
            >;
        };

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        sim_layer {
            // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓

            label = "SYM";

            // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
            //             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
            //             ┃     !     ┃     @     ┃     #     ┃     $     ┃     %     ┃   ┃     ˆ     ┃     &     ┃     Ü     ┃     '     ┃     "     ┃
            //             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
            //             ┃     Ä     ┃           ┃    SZ     ┃           ┃           ┃   ┃   MUTE    ┃   YEN     ┃   EURO    ┃  POUND    ┃     Ö     ┃
            // ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
            // ┃           ┃  EMAIL1   ┃  EMAIL2   ┃           ┃           ┃           ┃   ┃   VOL-    ┃   VOL+    ┃   LAST    ┃   NEXT    ┃     \     ┃           ┃
            // ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
            //                                     ┃           ┃    GIF    ┃    ADJ    ┃   ┃           ┃           ┃           ┃
            //                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛

            bindings = <
        &trans  &trans        &trans     &trans           &trans         &trans        &trans        &trans       &trans      &trans
        &trans  &kp ASTERISK  &kp POUND  &kp EXCLAMATION  &kp PERCENT    &kp CARET     &kp DOLLAR    &kp AT_SIGN  &trans      &trans
&trans  &trans  &trans        &trans     &trans           &trans         &kp C_VOL_DN  &kp C_VOL_UP  &kp C_PREV   &kp C_NEXT  &trans  &trans
                              &trans     &trans           &trans         &trans        &trans        &trans
            >;
        };

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        adjust_layer {
            // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓

            label = "ADJ";

            // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
            //             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
            //             ┃   RESET   ┃ BT CLEAR  ┃  OUT TOG  ┃           ┃           ┃   ┃           ┃    F7     ┃    F8     ┃    F9     ┃    F12    ┃
            //             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
            //             ┃ BOOTLOAD  ┃ BT NEXT   ┃           ┃           ┃           ┃   ┃           ┃    F4     ┃    F5     ┃    F6     ┃    F11    ┃
            // ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
            // ┃           ┃           ┃ BT PREV   ┃           ┃           ┃           ┃   ┃           ┃    F1     ┃    F2     ┃    F3     ┃    F10    ┃           ┃
            // ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
            //                                     ┃           ┃           ┃           ┃   ┃           ┃           ┃           ┃
            //                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛

            bindings = <
        &sys_reset   &bt BT_CLR  &out OUT_TOG  &trans  &trans    &trans  &kp F7  &kp F8  &kp F9  &kp F12
        &bootloader  &bt BT_NXT  &trans        &trans  &trans    &trans  &kp F4  &kp F5  &kp F6  &kp F11
&trans  &trans       &bt BT_PRV  &trans        &trans  &trans    &trans  &kp F1  &kp F2  &kp F3  &kp F10  &trans
                                 &trans        &trans  &trans    &trans  &trans  &trans
            >;
        };

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        adj {
            if-layers = <3 3>;
            then-layer = <3>;
        };
    };
};
